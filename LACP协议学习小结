LACP（Link Aggregation Control Protocol），链路聚合控制协议。（相关资料：12800交换机系列CPI文档） 

背景：手动eth-trunk能够检测到同一聚合组内的成员链路有断路等有限故障，但是无法检测到链路层故障、链路错连等故障。如下图中，由于A中一个借口被错连，会导致丢包。 
           
          因此使用LACP来提高eth-trunk的容错性，实现备份功能。在eth-trunk口中使能LACP后，接口间交互使用的报文为LACPDU（data unit），报文内容包括：系统优先级、MAC地址、接口优先级、接口号和操作Key（用来判断各接口相连对端是否在同一聚合组以及各接口带宽是否一致等。）等 

LACP模式Eth-Trunk建立的过程： 
    1、两端设备创建Eth-Trunk后配置为LACP模式，然后手动加入接口，接口便启用LACP协议，两端开始互发LACPDU； 
    2、设备将对面发来的报文和自身信息对比，比较优先级字段。先比较系统优先级，确定主动端设备（若优先级相同，确定MAC地址小的一端为LACP主动端），然后比较端口优先级，以主动端的接口优先级来选择活动接口。 
               
注意：目前解决方案不配置最大激活个数，加入的trunk口正常时均激活。 
LACP抢占：使能抢占功能后，聚合组会始终保持高优先级的接口作为活动接口的状态。 
LACP抢占延时：为了避免由于某些链路状态频繁变化而导致Eth-Trunk数据传输不稳定的情况。抢占延时是LACP抢占发生时，处于备用状态的链路将会等待一段时间后再切换到转发状态。 
以下事件会触发聚合组内的链路切换： 
    1、链路Down事件。 
    2、LACP协议发现链路故障。 
    3、接口不可用。 
    4、在使能了LACP抢占功能的前提下，更改备份接口的优先级高于当前活动接口的优先级。 

静态LACP和动态LACP的区别： 
    LACP协议交互方面没有区别，区别在于两种模式在LACP协商失败后的处理不一致：静态在协商失败口直接将Eth-Trunk变为down；动态将Eth-Trunk变为Down，但其成员口继承Eth-Trunk的VLAN属性状态变为Indep，可独立进行二层数据转发。以下为一个场景： 
 
•  当服务器A重启后为空配置时，LACP协商失败，此时动态LACP协议可保证服务器A通过Eth-Trunk成员口从文件服务器B获取到配置文件。 
•  当DeviceA收到服务器A的LACP协议报文时，服务器A和DeviceA将通过LACP协议报文进行聚合参数协商。 

________________________________________
LACP模式的跨设备链路聚合： 
 
（感觉是和堆叠一起使用的） 
DeviceB和deviceC需要具有相同的LACP系统优先级、相同的Eth-Trunk接口ID，Eth-Trunk接口具有相同的LACP系统ID。另外，成员口在LACP协议中的编号不相同。 

________________________________________
LACP有fast和slow两种模式，fast模式下内部报文发送频率默认为1S，缺省超时时间为3S；slow模式下内部报文发送频率为60S，缺省超时时间为90S。 
lacp timeout{ fast [ user-defined user-defined ] | slow } 命令用来配置LACP模式下Eth-Trunk接口接收LACP协议报文的超时时间。超时时间的选择与上层业务相关，时间不能过长，因为时间越长可能触发的告警就越严重，对业务的影响范围也更大。 
应用场景： 
如果两台设备之间通过3个10GE接口直连，将这3个10GE接口捆绑形成一个Eth-Trunk接口，通过命令mode { lacp-static | lacp-dynamic }配置Eth-Trunk接口为LACP模式，并通过命令least active-linknumber link-number配置状态为Up的Eth-Trunk接口成员链路数的下限阈值为2。 
如果对端链路聚合组的某个成员接口发生自环或其它故障，而本端Eth-Trunk不能及时感知对端成员口状态的变化，本端仍然有3个状态为Up的成员口。本端转发数据时仍然会通过3个成员口实现负载分担，此时必然造成数据流量丢失。为了保证数据流量可靠的传输到对端，可以通过本命令配置接口接收LACP协议报文的超时时间。如果本端成员口在设置的超时时间内未收到对端发送的LACP协议报文，本端成员口状态立即变为Down，不再转发数据。 
由于活动接口数并没有低于设置的活动接口数下限阈值，所以Eth-Trunk接口状态仍然为Up。本端发送的数据通过两个成员口实现负载分担，可靠的传输到对端。 

