三、选题报告
1.所选课题的题目及课题来源
课题题目：基于ROR的接入芯片性能数据管理系统的设计与实现
（这个题目暂定，我感觉这个题目有些长。ROR为Ruby on Rails的缩写，Rails为一种web框架，比较实用。我还想过一个题目：接入芯片性能数据分析管理系统的设计与实现）
2.课题研究的目的意义
过去，性能数据往往以Excel形式保存在测试人员本地，具有分散、非共享、难以维护等问题。芯片性能数据的采集分析是测试工作非常重要的一环，采集后可以清晰的观察到选定芯片在特定版本下的性能数据汇总。但随着测试过程的进行，会出现多种用例模式的组合，例如：上、下行对FEC的开启关闭选择，带宽配置选择，计算周期以及测试帧长的选择等等。
这就要求根据选定的多个条件，筛选出某个芯片在特定用例下的性能数据，方便管理人员进行查看。由于性能数据的格式众多，对芯片性能数据表格，进行模板式管理可以提升测试效率。还有，由于接入芯片行业的发展，努力优化芯片的性能，将成为增加公司芯片竞争力的重要一环，所以对某个芯片在当前版本与历史版本的性能基线对比研究是非常有必要的。
出于以上目的，设计一个ONT芯片性能数据管理系统是很有必要的。由于部门内的大部分人员都是用Ruby进行测试脚本的开发，同时Ruby语言存在一个开源的web应用框架。它可以大大减少开发所需要的代码量，支持面向对象编程，与此同时，Ruby具有一套独特的MVC开发框架，采取模型（Model），视图（View），控制器（Controller）分离开发的方式不仅降低了发展中的问题，同时也简化了许多复杂的动作。
本课题是基于ROR的芯片性能数据进行分析设计，首先对数据库表进行设计，实现用例信息模板管理，设计用例表，特性表，数据模板表的样式，用于统一性能数据的excel格式，可以顺利导入数据进行分析。对性能数据结果进行模板化管理，然后实现对特定芯片不同用例的性能数据进行筛选，方便分析查看，实现当前版本与历史版本的性能基线并完成对基线的可视化展示。最后，结合所有历史版本的性能数据生成出最新版本芯片的性能基线。
3.和本课题有关的国内外研究现状分析，包括发展水平和存在的问题等:
（这部分在六月撰写，目前看的文献量不够，还无法详细总结出现状分析）
4.研究目标、研究内容和拟解决的关键问题
4.1研究目标	
本课题针对以前的性能数据往往以Excel形式保存在测试人员本地，具有分散、非共享、难以维护等问题，所以计划设计一个可用于接入网硬件测试开发部的接入芯片性能数据分析管理系统，该系统可以进行用例信息采集，用例信息查询，性能数据筛选，性能数据的基线对比，新版本的性能基线生成。
4.2研究内容	
本课题的主要研究内容如下：
（1）本系统拟采用Ruby on Rails技术进行设计，需要研究脚本语言Ruby的特性，Rails框架的MVC架构，Rails框架的运作模式及运行环境等。在此基础上迭代式的增量开发接入芯片性能数据管理系统，争取每隔半个月都能交付可带来即时效益的产品。
（2）本系统需要进行数据库的设计，创建用例信息类数据表，性能模板类数据表，数据表之间互相联系，能够实现网页点击后的快速调用，并且由于数据量巨大，为了防止网页卡顿，必须提前设计并建立多种数据表。
（3）本系统需要设计用例管理模块，该模块用于采集用例信息，展示用例的详细信息，和数据的统计。
（4）本系统系统还需要设计结果模板管理和数据检索模块，该模块用于实现导入模板，将性能数据基线与该模板进行绑定。然后可以自定义条件进行检索及数据展示。
（5）本系统还需要设计数据分析模块，选择需要分析的用例，添加数据样本点，然后生成性能分析图，支持查看当前版本的数据与历史数据的对比。设计一张数据表用于收集生成的未来版本性能数据，并在页面中展示。
4.3 拟解决的关键问题
（1）	性能数据以前以Excel形式保存在测试人本地，具有分散，非共享，难以维护的问题。
（2）	测试用例模板的格式不统一，性能数据分析会不准确
（3）	测试人员只能查看性能数据，导致无法直观地看出某些性能的变化情况
（4）	当前无法对下一版本的性能数据形成预测
5.拟采取的研究方法、技术路线
5.1 拟采用的研究方法
拟采用自顶向下的研究方法，根据系统需求设计方案，分别实现芯片性能数据管理和性能数据分析功能。
5.2技术路线
1.拟使用接入网部门的服务器搭建系统架构（已实现）
在网络拓扑方面，系统业务服务器，数据服务器都位于华为接入网部门的机房内，与需要进行内部身份验证服务器之间进行数据通信，用户只为公司内部员工，通过公司内网才可以访问服务器，获取服务。
2.拟采用ROR（Ruby on Rails）架构及MySQL关系型数据库（已实现）
在技术方面，本系统将采用ROR（Ruby on Rails）架构，以关系型数据库MySQL作为持久化存储方案。Rails是一款使用Ruby语言实现的开源web应用框架，并严格按照MVC结构开发，代码更精简，配置最小化。
在逻辑方面采用MVC架构进行设计，如下图所示。其中模型层（Model）实现产品的具体业务，视图层（View）完成产品与使用者的交互，控制层（Controller）链接模型与视图，将来自用户的请求分配给正确的模型进行处理，并选择恰当的视图来显示模型返回的结果。
综合Rails的特点，MVC模式的设计思路，系统将分为用户层，鉴权层、应用系统层、中间件层、数据层以及硬件和网络基础设施层，系统体系结构如图
3.拟采用自顶向下的开发思路
根据性能数据分析管理系统的需求描述，将相关功能统一在相应的子系统或模块中，故系统计划分为用例管理模块，结果模板管理模块，性能数据检索模块以及性能数据分析模块4大部分，系统功能结构图如图所示：
项目初期，系统采取自顶向下的开发思路，计划先通过rails generate命令生成若干Controller，并将概要设计阶段制作的高保真原型转换为对应的Action View，此时可以完成主要的跳转逻辑、路由规则，并抽离页面公共部分作为布局（Layout）或者渲染组件（Partial）。接下来可以进行DB设计，确认各实体类需要存储的信息后，创建相应的Model，并通过Rails的Migration,Schema来更新不同的DB服务器。最后将Controller接收到的参数，处理后传给Model的实现，当数据接口满足需求后，在逐渐向客户端实现，包括请求处理、前台页面及交互等。







需要做的工作包括：
（1.数据格式要重新统一）
（2.性能数据检索模块已经存在，但该功能需要完善，目前无法检索）
（3.性能数据分析模块需要重新做，要实现数据展示并标记错误的数据，下一版本的基线预测需要自己开发）

