交换网环路探测断环以及恢复方案测试总结
1	方案分析
组网环路问题是开局和现网环境中遇到最多的网上问题之一。而且有些组网环路问题前期开局不一定能够被及时发现(如大模式下备用链路有环路)，这样就为后面引起其他更严重的网上问题埋下了隐患，这样的问题一旦出现，往往更难复现和定位，需要花费的时间和精力更多，所以为了从根本上解决组网环路的问题，提出了对组网环路进行主动探测、断环和恢复的方案
考虑到目前组网环路问题均为大模式组网模式下产生的，且小模式组网较简单，所以本方案主要考虑对大模式组网环路场景进行探测、断环及恢复处理，而对于小模式组网，只做环路探测，不做断环恢复等处理。
1.1	环路场景分析
场景1、用于进行大模式组网的外置交换机本身有环路
 图1 交换机自身存在环路的场景

场景2、在外置交换机侧，SMU单板用于大模式组网的两个端口不属于同一个trunk，这里分两种情况：
（1）	外置交换机没有配trunk；
 
图2 交换机没有配trunk的场景
（2）外置交换机配了trunk，但是用于大模式组网的两个端口到外置交换机的网线插错了，分别插到了外置交换机两个不同的trunk中。
 
图3 SMU端口1、2接到交换机不同trunk中的场景

场景3、用于小模式组网，面板级联网口3和4解trunk场景：
 
图4 从框面板3、4端口解trunk

1.2	环路主动探测
1.2.1	探测报文结构
通过主动发送广播报文实现探测目的，发送的报文为IP包，目的MAC地址为全1，源MAC地址前三字节为0x00，0x18，0x82，后三个字节是根据如下方式计算得到的：
LoopTestmac[3] = (uint8)((( ucPortId & 0x0f) << 4) | (g_stFrameSlotId.uiFrameID & 0x0f));
LoopTestmac[4] = (uint8)(( ucCpuId & 0x1f) << 3) & 0xf8;
LoopTestmac[5] = (uint8)((g_stFrameSlotId.uiDeviceID << 5) | (g_stFrameSlotId.uiSlotID & 0x1f));
其中ucPortId取值0，ucCpuId取值0x1f，槽位号取值为主动发探测报文SCU单板槽位，大模式下主用链路对应SCU单板发探测报文，小模式下主备SCU均发探测报文。报文类型为0x0800(IP报文)，其余字节均为0。
 通过tesgine抓包，以大模式下框号为4，设备号为0，8槽链路为主用链路场景为例：
 
1.2.2	探测报文发送场景
    对于大模式组网，因为主备SCU均只使用面板1、2号网口与交换机级联，而3、4号端口是不使用的，所以探测报文只考虑往1/2号网口发送；又因为备用链路不能发送除OAM外其他报文，所以SCU单板只有通过主用链路发送探测报文，又为了减少发送广播报文的影响，所以采用主用链路所在SCU单板以指定端口的方式，往本板trunk21内的所有端口(1/2号端口)发送探测报文(其实这里往trunk中的某个网口发也可以)；
对于小模式组网，因为没有主备链路，所以主备SCU均会发送探测报文，且也只往本板trunk21内的端口发送。
    如果组网中存在环路，主动发起探测报文的SCU单板的二层表项中，会学习到探测报文的源MAC地址，通过判断面板端口对应L2表项是否学习到该MAC地址，来判断环路是否存在（之前的环路判断方案：判断面板端口是否学习到框内单板MAC）。
  
1.3	主动断环
之前有介绍小模式下不进行断环处理，只对大模式组网进行断环处理。大模式下断环的目的就是为了区分环路是否为交换机环路。
当出现组网环路时，通过将主用链路trunk组中的一个端口踢出trunk组，此时备用链路升主；如果组网还存在环路，升主后的链路也会做踢端口操作，以达到trunk组中只有一条链路的目的，如果环路仍存在，则说明是交换机环路，否则为非交换机环路。目前方案针对非交换机环路具体是哪种环路组网还无法确定。
 
软件通过上报告警区分环路类型，如果产生环路时上报2548参数为1告警；如果链路被踢出时上报2548参数为踢出端口告警(取5/6表示GE22/GE23)；如果踢出后仍有告警，则上报2548参数为7告警，表示交换机环路；如果踢出后环路消失，则上报2548参数为1告警恢复，表示非交换机环路。
主用链路把端口踢出trunk采用的方案有如下两种：
    （1）禁止端口的OAM功能，并把端口的OAM满意状态置为不满意；
    （2）把端口link down掉。
    将端口踢出trunk的方案优先考虑(1)，只有当(1)无法达到踢出trunk目的时，再考虑用(2)。因为交换机端口有无配置ACL功能会导致主备链路trunk端口OAM是否满意，所以对环路场景需要区分是否配置了ACL功能。
1.4	组网恢复
通过主动断环后，通过上报的告警可以区分环路类型，一线人员再通过排查组网，或者正确配置交换机后，再通过调用CDE上MML命令MOD PORT，实现组网恢复。


2	测试场景分析及测试结果
2.1	测试场景分析
2.1.1	大模式测试场景
大模式组网场景分析，结合三种大模式环路组网场景，以及交换机是否有ACL配置，做如下场景分析：
 
实际组网配置脚本中ACL功能只会对trunk端口进行配置，所以未配trunk端口且配ACL功能场景不考虑。所以分析结果主要环路场景有5种，加正常组网场景，共6大组网场景需要验证。再根据环路场景是否为主备SCU链路，扩展场景如下：
场景1、2有以下可能组网：
1）同一个交换机上环路
2）跨交换机环路
场景3(至少一个链路接交换机未配trunk端口)：
 
场景4(至少一个链路接交换两个配有ACL功能的trunk端口)：
 
场景5(至少一个链路接交换两个未配ACL功能的trunk端口)：
 
场景6(正常组网)：
 
2.1.2	小模式测试场景
    1）小模式组网场景测试，遍历2框、3框自级联，通过解3、4端口trunk模拟环路
2）正常组网场景2框、3框自级联测试
2.2	测试用例及测试结果
     
2.3	测试问题汇总及讨论
1）可维可测功能需要增加打开和关闭接口；
目前环路探测功能暂未实现该接口，环路探测功能默认是打开的。实现该接口的同时，需要上层同步提供对应的MML接口，底层如果需要调用的话，需要将该接口放入shell开放命令列表。
2）打开环路探测方案时，存在3、4端口无法检测环路问题，讨论打开和关闭探测方案后，环路检测该如何实现：
    目前打开探测方案时环路检测方案为：大小模式下均采用L2表项是否学习到探测报文源MAC来判断，学习到说明有对应端口或trunk外接网络有环路，未学习到则无环路；
本方案的缺陷为：因为探测报文不会往3、4端口发，即使3、4号端口外接网络存在环路，对应的L2表项也学习不到探测报文源MAC地址，也就无法检测环路的存在。由于大模式组网多框组网不会使用3、4端口，所以该缺陷对大模式无影响；而对于单框或者小模式场景下3、4端口也是直连至FS文件服务器，也基本不会产生环路。
    考虑到环路探测方案要支持开关，所以关闭后也需要支持环路检测，所以建议关闭后采用原有的检测方案，即通过判断L2表项中是否存在框内单板MAC地址，但此时需要保留之前的定时向所有单板请求广播报文的操作，否则产生环路时可能会一直报2548告警。
    而打开环路检测方案后，是否需要对3、4端口检测？可分为以下几种方案：
1）	大小模式组网，采用相同的环路检测方式，即均不考虑3、4号端口的环路检测，理由：3、4端口单框或者在小模式下使用，且一般都是直连网线至FS服务器，基本不会存在环路；自级联组网较简单，一般不会出错，现网中也没有相关案例；
2）大小模式组网，采用不同的环路检测方式，大模式采用主动探测方式，L2表项只检测探测报文源MAC地址，而小模式仍沿用原方案。
针对代码修改量，两个方案应该差不多；针对方案复杂度方案1）比方案2）复杂，且方案1）打开和关闭探测功能，大小模式处理方案一致，所以建议使用方案1）。
3	代码架构梳理
3.1	定时探测发包：
该探测报文函数在低优先级定时任务中执行，每10s发送1次。
 
3.2	定时环路检测：
通过定时刷新面板端口环路状态检测环路，之前环路检测方案为面板端口对应的L2表项中学习到框内单板MAC地址，本方案改为面板端口对应L2表项中学习到探测报文的源MAC地址即为环路，且后续增加了断环处理，但去除了向各框内单板请求发送广播报文处理，用于刷新二层表项。环路探测方案因为环路检测的方式发生变化，所以该方案中去除后不影响，但如果使用原有方案，该请求功能还需加上。
 
3.3	断环处理：
小模式组网和大模式备用链路都不做断环处理，只有大模式下对主用链路断环处理。
 
3.4	组网恢复：
在禁止使能接口GESW_SetPanelPortEnable中加入组网恢复的操作，恢复操作为：将踢出trunk端口重新加入trunk，方式一对踢出trunk为linkup端口OAM状态为不满意，通过将OAM使能且置满意，并加入trunk；方式二对踢出trunk为linkdown端口，需要区分是否是被底层linkdown的，如果是，做使能端口处理；如果不是使能OAM并置满意，加入trunk。
 
当SCU单板面板链路link状态发生变化时，也会触发对非linkdown踢出trunk的端口进行使能OAM且置OAM满意，且加入trunk动作。

4	环路探测交换机配置脚本
  
