第3章 OLT表项调度系统方案改进
  本章开始将对上一章中设计的系统模块进行具体的模块化设计，针对当前OLT中表项调度系统中主备倒换机制的时延过长，易产生未知单播的问题对系统中的主备倒换方案进行改进；针对系统中现有MAC地址转发机制存在的MAC地址欺骗的问题，对系统的表项转发方案进行改进，从而来提高OLT的安全性。
3.1 典型的表项调度方案
3.1.1板间消息同步
3.2 优化的表项同步模块
3.2.1.1 RDP协议分析（RFC1151协议）
	RDP协议提供了简单可靠的数据流投递服务。但该协议不提供自动的拆包、组包，因此它发送的数据包大小必须符合以太网帧的长度限制。
	RDP使用了一个较为简单的流程控制：流程控制是以停止－等待为基础的，也就是说滑动窗口大小为一。直到上一个数据包收到确认信息的时候，一个新的数据包才会被发送出去。每一次发送，发送的CPU都会等待对端CPU的ACK信息。如果发送的CPU在一定时间内没有收到确认，重新发送原始数据。RDP是BCM开发的私有协议，原为\stacking\rdp.c，现为drv\GESW_RDP.c。在SCUa中，“TRUNK组同步消息”、“BAM同步消息”、“L2同步消息”等都通过RDP消息进行板间可靠的消息同步。
   RDP报文格式：
MAC头	SNAP协议头	STK协议头	RDP协议头	PARC头	Data
  18Byte      6Byte           4Byte       16Byte      8Byte

	详细结构图：
从图中可以看出RDP有MAC头，SNAP头和STK头，这部分与消息分发中心（Message Dispatch Center，MDP）相同，但RDP报文的STK头中stk_type域为bbbb，而MDP报文的STK头中stk_bype域为aaaa。
	MDP是华为公司网管平台（intergrated Management Application Platform，iMAP）的核心模块，系统的各个模块之间的通信都要经过MDP。各个模块之间的信息都要先与MDP建立socket连接，然后与其它模块进行通信。在这个概念的支撑下，可以把MDP作为连接的服务器端，把其他进程模块作为客户端，如下图所示：

MDP作为iMAP的核心模块，是消息分发传递的中转站，应用进程与它建立连接然后进行通信
3.2.1.2 RDP的数据流的处理流程
	数据包处理之前的流程图
	数据包处理流程图
RDP消息发送分为2种：上层调用发送接口进行发送、重发机制实现消息发送。两种发送的流程分别如下：

   RDP的消息发送流程图


3.2.1.3 RDP消息类型
现有RDP消息类型如下：
1．TRUNK_SET
2．BAM_INFO_SYNC
3．LINK_CHANGE_NOTIFY
4．L2_CHANGE_NOTIFY
5．PLACP_NOTIFY
6．CRC_ALM_NOTIFY    
7．PROTECT_GRP_NOTIFY
8．PORT_CONTROL
9．L2_FAULT_NOTIFY
代码中有如下定义：
typedef enum tagGeswMsgFuncEnum
{
    GESW_MSG_TRUNK_SET,
    GESW_MSG_LINKCHANGE_NOTIFY,
    GESW_MSG_L2_CHANGE_NOTIFY
    GESW_MSG_BAM_CHECK_START
    GESW_MSG_BAM_INFO_SYNC
    GESW_MSG_PLACP_NOTIFY
    GESW_MSG_UNKNOWN
}GESW_MSG_FUNC_ENUM

若需要增加消息类型，则首先需要在上述枚举中增加类型，然后定义如下类型的消息结构（PARC头），然后增加相应发送和接收后处理代码即可。
typedef struct tagGeswReqInfoStruct{
    GESW MSG FUNC ENUM  enMsgFuncs;/需要执行的操作/
    UNIT32              u1Param;/操作需要的主要参数/
    GESW_REQ_PARAM_UNION unionParam;/操作需要的详细参数/
}
3.2.2.1 DMA基本原理
直接内存访问（Direct Memory Access，DMA)）是一种硬件机制，它允许外围设备和主内存之间直接传输它们的I/O数据，而不需要系统处理器的参与。使用这种机制可以大大提高与设备通信的吞吐量。在实现DMA传输时，是由DMA控制器直接掌管总线，因此，存在着一个总线控制权转移问题。即DMA传输前，CPU要把总线控制权交给DMA控制器，而在结束DMA传输后，DMA控制器应立即把总线控制权再交回给CPU。一个完整的DMA传输过程主要经过以下几个步骤：DMA请求、DMA响应、DMA传输、DMA结束
DMA 原理图
mTCA V2 L2表项同步沿袭了mTCA V1的方案，通过在内存中维护一个 shadow表，比较shadow表（后称 软表）与LSW(局域网交换机)中实际L2表项（后称 硬表），得知上一次检查与本次检查L2表项发送的变化，通过RDP消息（BCM开发的私有协议，RDP消息进行板间可靠的消息同步）将这一变化告知备板，让备板作出相应的操作（删除、添加对应硬表）。
3.2.2.2 Linux的中断处理过程
	Linux系统对外部设备的中断处理，是系统的软硬件协同工作的过程，如图2.7所示。硬件负责响应外部设备中断，从中断控制器中读取中断类型码，保存部分CPU寄存器，并使系统跳转到中断服务总程序执行；软件负责将中断号、和中断程序使用到的硬件没有保存的CPU寄存器入栈，从irq_desc结构中找到响应的中断处理程序。
	Linux FIFO处理表项的过程如图3.6所示：（1）L2_MOD_FIFO的内容从网络上到达处理器的缓冲区；硬件DMA引擎从描述符FIFO中取描述符，并根据描述符的地址将L2_MOD_FIFO的内容DMA到内存；（2）当信号量获取3s时，便向主机发硬中断；（3）主机CPU执行硬件中断处理程序将数据包挂着内核网络核心层的接受队列上，并触发软中断处理程序；（5）软中断处理程序对接收队列上的报文进行处理，并根据协议类型将报文放在不同的队列中，如果不是发往本机的报文，软中断处理程序会将报输出到发送队列上。
图：Linux FIFO处理表项的过程
在Linux操作系统核心中，网络处理占用CPU资源主要分成两部分：一部分用来处理网卡数据到达而激活的中断；另一部分用来对收到的数据包进行处理、转发。理想状态下，如果网络接受数据与处理数据速率相同。同时接收与处理占用的CPU资源的和小于CPU的总的资源，那么数据包既不会拥塞也不会丢掉，网络性能良好。
为避免频繁产生中断，在驱动中采取关中断技术，所谓关中断技术就是当CPU接收到交换芯片的第一个中断执行中断处理时，在中断处理程序中将网卡的中断关闭，当处理完所有变化信息后，在将中断打开。采取关中断技术的条件是交换芯片在关中断的条件仍然可以向主机DMA数据。
处理服务器因中断过载的方法（减少上下文的切换开销）：
在中断驱动的系统中，每次网络数据包到达都会引发硬件中断。而每次中断前，如果系统是运行的是用户空间进程，那么就存在用户空间进程到内核空间的切换，在一个重负荷的系统中，频繁的切换开销会浪费系统的资源。我们可以通过开发核心数据流（Kernel-level Streaming）或硬件级流（Hardware-level Streaming）的方法来避免系统的切换开销。
核心级数据流是指数据从源经过系统总线进行转发而不需要是数据经过用户空间进程，这个过程因为数据在内存中，因此需要CPU的参与。核心级数据流可以把数据从网络协议栈的接收队列直接拷贝到发送队列，而对数据包的转发对设备是透明的，每个设备并不知道它的数据队列是用户空间进程相连还是与另一个转发设备相连。
硬件级数据流将数据通过私有总线或对等DMA通过系统总线进行转发而不需要使数据经过用户空间进程，也不需要CPU操作数据。在目前的网络系统中我们可以在网卡硬件实现硬件级数据流：在网卡硬件直接判断报文是否是送往本机的报文，若是送往本机的报文，则以DMA的方式交给主机处理，如果是需要转发的报文，则直接将报文从网卡硬件的接收缓冲区以DMA的方式传输到网卡硬件的发送缓冲区，直接在网卡硬件将报文转发而不需要打扰主机，也就是说硬件级数据流的方法对主机是透明的。
