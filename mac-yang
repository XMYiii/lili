/******************************************************
* Copyright (C) 2016-2019 Huawei Technologies Co., Ltd. All rights reserved.

module: huawei-mac
    +--rw mac-address-table
    |  +--rw static-mac* [mac-address id-type id]
    |     +--rw mac-address    yang:mac-address
    |     +--rw id-type        domain-id-type
    |     +--rw id             domain-id
    |     +--rw interface      if:interface-ref
    +--rw static-flapping-protect
    |  +--rw enable?   boolean
    +--rw mac-address-global
    |  +--rw dynamic-mode-enable?   boolean
    +--ro mac-statistics
       +--ro mac-summary* [slot]
          +--ro slot          string
          +--ro static?       yang:counter32
          +--ro blackhole?    yang:counter32
          +--ro dyn-local?    yang:counter32
          +--ro dyn-remote?   yang:counter32
          +--ro dyn-trunk?    yang:counter32
          +--ro oam?          yang:counter32
          +--ro sticky?       yang:counter32
          +--ro security?     yang:counter32
          +--ro sec-config?   yang:counter32
          +--ro authen?       yang:counter32
          +--ro guest?        yang:counter32
          +--ro mux?          yang:counter32
          +--ro snooping?     yang:counter32
          +--ro pre-mac?      yang:counter32
          +--ro in-used?      yang:counter32
          +--ro capacity?     yang:counter32
  augment /if:interfaces/if:interface:
       +--rw mac-security
          +--rw mac-limit
          |  +--rw enable?         boolean
          |  +--rw maxinum?        uint16
          |  +--rw action?         enumeration
          |  +--rw alarm-enable?   boolean
          +--rw mac-learning
          |  +--rw enable?   boolean
          |  +--rw action?   enumeration
          +--rw port-security
             +--rw enable?       boolean
             +--rw maxinum?      uint16
             +--rw action?       enumeration
             +--rw port-security-aging
                +--rw aging-time?   uint16
                +--rw aging-type?   enumeration

  rpcs:
    +---x mac-address-table-get
       +---w input
       |  +---w get-num?                    yang:counter32
       |  +---w (request-type)?
       |     +--:(get-request)
       |     |  +---w destination-address
       |     |     +---w mac-address?   yang:mac-address
       |     |     +---w id-type?       domain-id-type
       |     |     +---w id?            domain-id
       |     |     +---w interface?     string
       |     |     +---w search-type?   search-type
       |     +--:(get-next-request)
       |        +---w last-mac-address-details
       |           +---w last-mac-address?   yang:mac-address
       |           +---w last-id-type?       domain-id-type
       |           +---w last-id?            domain-id
       |           +---w interface?          string
       |           +---w search-type?        search-type
       +--ro output
          +--ro mac-address-details* [mac-address id-type id]
          |  +--ro mac-address             yang:mac-address
          |  +--ro id-type                 domain-id-type
          |  +--ro id                      domain-id
          |  +--ro mac-type?               mac-address-type
          |  +--ro forwarding-interface?   string
          +--ro has-more?              boolean
 ***************************************************/

module huawei-mac {
  namespace "urn:huawei:params:xml:ns:yang:huawei-mac";
  prefix huawei-mac;

  import ietf-yang-types {
    prefix yang;
  }
  
  import ietf-interfaces {
    prefix if;
  }
  
  import huawei-vlan {
    prefix huawei-vlan;
  }
  
  
  organization "Huawei Technologies Co., Ltd.";
  

  contact
    "Huawei Industrial Base
     Bantian, Longgang
     Shenzhen 518129
     People's Republic of China
     Website: http://www.huawei.com
     Email: support@huawei.com";

  description
    "This module contains a collection of YANG definitions for
     MAC.";

  revision 2019-08-05 {
    description
      "Add bridge-domain type.";

    reference "";
   }
  revision 2019-03-18 {
    description
      "Modify the action of mac-limit.";

    reference "";
   }
  revision 2019-03-12 {
    description
      "Add mac-address mode.";

    reference "";
   }
  revision 2018-12-22 {
    description
      "Add port security.";

    reference "";
   }
  revision 2017-03-02 {
    description
      "Add get mac-Address.";

    reference "";
   }
  revision 2016-11-24 {
    description
      "Add mac-learning disable.";

    reference "";
   }

  revision 2016-07-30 {
    description
      "Initial revision.";

    reference "";
   }

  /*
  * Features
  */

  /*
  * Identities
  */


  /*
  * Typedefs
  */
  typedef domain-id-type {
    type enumeration {
      enum vlan {
        value 1;
        description 
          "The type of VLAN domain id.";
      }
      enum vsi {
        value 2;
        description 
          "The type of VSI domain id.";
      }
      enum bd {
        value 3;
        description 
          "The type of BD domain id.";
      }
    }
    description 
      "The type of layer 2 domain id.";
  }
  
  typedef domain-id {
    type union {
      type huawei-vlan:vlan-id;
      type string {
        length "1..31";
      }
    }
    description 
      "The layer 2 domain id.";
  }
  
  typedef search-type {

      type enumeration {
      enum interface {
        value 1;
        description 
          "The search type by interface.";
      }
      enum vlan {
        value 2;
        description 
          "The search type by vlan/vsi/bd";
      }
      enum mac {
        value 3;
        description 
          "The search type by mac.";
      }
      enum all {
        value 4;
        description 
          "The search type of all mac.";
      }
    }

  description 
      "The search type of MAC address.";
  }
  
  typedef mac-address-type {
    type enumeration {
      enum static {
        value 1;
        description 
          "The type of static MAC.";
      }
      enum blackhole {
        value 2;
        description 
          "The type of blackhole MAC.";
      }
      enum dynamic {
        value 3;
        description 
          "The type of dynamic MAC.";
      }
      enum oam-pu {
        value 4;
        description 
          "The type of oam-pu MAC.";
      }
      enum oam-po {
        value 5;
        description 
          "The type of oam-po MAC.";
      }
      enum security {
        value 6;
        description 
          "The type of security MAC.";
      }
      enum sec-config {
        value 7;
        description 
          "The type of sec-config MAC.";
      }
      enum sticky {
        value 8;
        description 
          "The type of sticky MAC.";
      }
      enum mux {
        value 9;
        description 
          "The type of mux MAC.";
      }
      enum snooping {
        value 10;
        description 
          "The type of snooping MAC.";
      }
      enum authen {
        value 11;
        description 
          "The type of authen MAC.";
      }
      enum guest {
        value 12;
        description 
          "The type of guest MAC.";
      }
      enum pre-authen {
        value 13;
        description 
          "The type of pre-authen MAC.";
      }
    }
    description 
      "The type of MAC address.";
  }


  /*
  *   groupings
  */

 
  /*
   * Configuration data nodes
   */

  container mac-address-table {
    description 
      "MAC address configuration parameters.";

    list static-mac {
      key "mac-address id-type id";
      description 
        "The static mac-address.";
       
      leaf mac-address {
        type yang:mac-address;
        description 
          "The static mac-address to be configured, format as xx:xx:xx:xx:xx:xx.";
      }
      
      leaf id-type {
        type domain-id-type;
        description 
          "The id-type of static mac.";
      }
      
      leaf id {
        type domain-id;
        description 
          "The domain-id of static mac.";
      }
      
      leaf interface {
        type if:interface-ref;
        mandatory true;
        description 
          "The interface of static mac.";
      }     
    }
  }

  container static-flapping-protect {
    description 
      "Static MAC address flapping detection.";
      leaf enable {
        type boolean;
        description 
          "Commit or cancel static MAC address flapping detection.";
	}
  }
  
  container mac-address-global {
    description
      "Indicates global parameters of the MAC address.";

    leaf dynamic-mode-enable {
      type boolean;
      default "false";
      
      description 
        "The leaf indicates the mac-address generation mode of the interface ,which is switched from Layer 2 to Layer 3.";
    }

  }
  
  augment "/if:interfaces/if:interface" {
    description 
      "Interface configuration parameters of MAC.";
    
    container mac-security {
      description 
        "Configuration of mac security.";
      
      container mac-limit {
        description 
          "Configuration of mac limit.";
        
        leaf enable {
          type boolean;
          description 
            "Commit or cancel mac limit.";
        }
        
        leaf maxinum {
          type uint16;
          description 
            "The max number of MAC entries in the interface.";
        }
        
        leaf action {
          type enumeration {
            enum discard {
              value 1;
              description 
                "The action discard to be taken after the number of MAC entries in the interface reached the limit.";
            }
            enum forward {
              value 2;
              description 
                "The action forward to be taken after the number of MAC entries in the interface reached the limit.";
            }
          }
          description 
            "The action to be taken after the number of MAC entries in the interface reached the limit.";
        }
        
        leaf alarm-enable {
          type boolean;
          description 
            "Whether to trigger an alarm if the number of MAC entries in the interface reached the limit.";
        }
      }
      
      container mac-learning {
        description 
          "Configuration of mac learning.";
        
        leaf enable {
          type boolean;
          description 
            "Commit or cancel mac learning.";
        }
        
        leaf action {
          type enumeration {
            enum discard {
              value 1;
              description 
                "The action discard to be taken after MAC learning disabled.";
            }
            enum forward {
              value 2;
              description 
                "The action forward to be taken after MAC learning disabled.";
            }
          }
          description 
            "The action to be taken after MAC learning disabled.";
        }
      }

      container port-security {
        description 
          "Configuration of port security.";
        
        leaf enable {
          type boolean;
          description 
            "Commit or cancel port security.";
        }
        
        leaf maxinum {
          when "../enable = 'true'";
          type uint16{
            range "1..4096";
          }
          description 
            "Specifies the maximum number of secure MAC addresses that can be learned by an interface.";
        }
        
        leaf action {
          when "../enable = 'true'";

          type enumeration {
            enum protect {
              value 1;
              description 
                "Discards packets with new source MAC addresses when the number of learned MAC addresses exceeds the limit.";
            }
            enum restrict {
              value 2;
              description 
                "Discards packets with new source MAC addresses and sends a trap message when the number of learned MAC 
                addresses exceeds the limit.";
            }
            enum shutdown {
              value 3;
              description 
                "Set the interface status to error down and sends a trap message when the number of learned MAC 
                addresses exceeds the limit.";
            }
          }
          description 
            "The action to be taken after the number of MAC entries in the interface reached the limit.";
        }

        container port-security-aging {
          when "../enable = 'true'";
          description 
            "Configuration of port security aging.";
          leaf aging-time {
            type uint16{
              range "1..1440";
            }
            units min;
            description 
              "Specifies the aging time of secure dynamic MAC addresses.";
          }
          leaf aging-type {
          when "(../aging-time >= 1) and (../aging-time <= 1440)";
            type enumeration {
              enum absolute {
                value 1;
                description 
                  "Indicates the absolute aging time. After the aging time of secure dynamic MAC addresses 
                  is set, the system calculates the lifetime of each MAC address every minute. If the lifetime 
                  is larger than or equal to time minutes, the secure dynamic MAC address is aged immediately. 
                  If the lifetime is smaller than time minutes, the system determines whether to delete the 
                  secure dynamic MAC address after 1 minute.";
              }
              enum inactivity {
                value 2;
                description 
                  "Indicates the relative aging time. After the relative aging time is set to time minutes, 
                  the system checks traffic from each secure dynamic MAC address every 1 minute. If no traffic 
                  is received from a secure dynamic MAC address, this MAC address is aged out after time minutes.";
              }
            }
            description 
              "The aging type of port security.";
          }
        }
      }
    }
  }

  /*
   * Operational state data nodes
   */
   
  container mac-statistics {
    config false;
    description
      "Data nodes for MAC statistics.";
      
    list mac-summary {
      key "slot";
      description
        "Summary statistics of MAC address.";
      
      leaf slot {
        type string {
          length "1..31";
        }
        description
          "Name of the forward engine.";
      }
      
      leaf static {
        type yang:counter32;
        description
          "Number of static MAC entries.";
      }
      
      leaf blackhole {
        type yang:counter32;
        description
          "Number of blackhole MAC entries.";
      }
      
      leaf dyn-local {
        type yang:counter32;
        description
          "Number of dyn-local MAC entries.";
      }
      
      leaf dyn-remote {
        type yang:counter32;
        description
          "Number of dyn-remote MAC entries.";
      }
      
      leaf dyn-trunk {
        type yang:counter32;
        description
          "Number of dyn-trunk MAC entries.";
      }
      
      leaf oam {
        type yang:counter32;
        description
          "Number of oam MAC entries.";
      }
      
      leaf sticky {
        type yang:counter32;
        description
          "Number of sticky MAC entries.";
      }
      
      leaf security {
        type yang:counter32;
        description
          "Number of security MAC entries.";
      }
      
      leaf sec-config {
        type yang:counter32;
        description
          "Number of sec-config MAC entries.";
      }
      
      leaf authen {
        type yang:counter32;
        description
          "Number of authen MAC entries.";
      }
      
      leaf guest {
        type yang:counter32;
        description
          "Number of guest MAC entries.";
      }
      
      leaf mux {
        type yang:counter32;
        description
          "Number of mux MAC entries.";
      }
      
      leaf snooping {
        type yang:counter32;
        description
          "Number of snooping MAC entries.";
      }
      
      leaf pre-mac {
        type yang:counter32;
        description
          "Number of pre-authen MAC entries.";
      }
      
      leaf in-used {
        type yang:counter32;
        description
          "Number of used MAC entries.";
      }
      
      leaf capacity {
        type yang:counter32;
        description
          "The capacity of MAC entries.";
      }
    }

  }
  
  /*
   * RPC methods 
   */
   
  rpc mac-address-table-get {
    description
      "This is a function that returns operational data for a
       given mac entry and the corresponding details of that mac
       entry. The mac entries are fetched similar to the snmp 
       get-next model. When no input is given to this rpc, first
       set of mac entries will be fetched. If there are any
       more extra mac entries that are there to be fetched,
       the flag has-more at the end of the o/p will be set to
       true. To get the next set of mac entries, this rpc has to
       be queried again with the last mac entry details of the
       previous set as the input in get-next-request case. With
       get-next-request all fields i.e. last-mac-address,
       last-id-type, last-id, interface and serach-type need to
     be passed as input. When the rpc is queried with a 
     mac-address as input in the get-request case the 
     corresponding mac entry, if exists, will be fetched.";
       
    input {
      leaf get-num {
        type yang:counter32;
        description
          "The num to get MAC Address.";
      }
    
      choice request-type {
        description
          "The request type used to get data.";
        case get-request {
          description
            "The request to get data.";
          container destination-address {
            description
              "The first request of get mac address.";
            leaf mac-address {
              type yang:mac-address;
              description
                "The Mac Address for which the
                 corresponding mac entry will be
                 fetched. The i/p should be in 
                 xx:xx:xx:xx:xx:xx format.";
            }
      
            leaf id-type {
              type domain-id-type;
              description
                "Get MAC Address by domain-id-type.";
            }
      
            leaf id {
              type domain-id;
              description
                "Get MAC Address by domain-id.";
            }
      
            leaf interface {
              type string {
                length "1..256";
              }
              description
                "Get MAC Address by interface.";
              }
        
            leaf search-type{
              type search-type;
              description
                "The search-type of get MAC Address.";
            }
    
          }
        }
        
        case get-next-request {
          description
            "The request to get next data.";
          container last-mac-address-details {
            description
              "The last mac address details.";
            leaf last-mac-address {
              type yang:mac-address;
              description
                "The Mac Address information of the
                 last mac entry in the previous set, 
                 from which the next set of mac entries
                 will be fetched. The i/p should be in 
                 xx:xx:xx:xx:xx:xx format.";
            }
            
            leaf last-id-type {
              type domain-id-type;
              description
                "Get MAC Address by domain-id-type.";
            }
      
            leaf last-id {
              type domain-id;
              description
                "Get MAC Address by domain-id.";
            }
      
            leaf interface {
              type string {
                length "1..256";
              }
              description
                "Get MAC Address by interface.";
            }
        
            leaf search-type{
              type search-type;
              description
                "The search-type of get MAC Address.";
            }
          }
        }
      }
    }
    
    output {
      list mac-address-details {
        key "mac-address id-type id";
        description
          "The result of MAC Address Details.";
		  
        leaf mac-address {
          type yang:mac-address;
          description
            "The result of MAC Address.";
        }
        
        leaf id-type {
          type domain-id-type;
          description
            "The result of domain-id-type.";
        }
  
        leaf id {
          type domain-id;
          description
            "The result of domain-id.";
        }

        leaf mac-type {
          type mac-address-type;
          description
            "The result of mac-type.";
        }
        
        leaf forwarding-interface {
          type string {
            length "1..256";
          }
          description
            "The result of forwarding-interface.";
        }
      }
      
      leaf has-more {
        type boolean;
        description
          "This indicates whether there are more mac
           records to fetch or not.";
      }
    }
  } 
}
